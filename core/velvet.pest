t" | NEWLINE | COMMENT }
program = { statement* }

statement = {
      say
    | let
    | const
    | if_stmt
    | for_stmt
    | while_stmt
    | break_stmt
    | continue_stmt
    | fun
    | lambda_stmt
    | import
    | try_stmt
    | type_def
    | match_stmt
    | return_stmt
    | expr_stmt
}

say = { "say" ~ expr }

let = { "let" ~ IDENT ~ (":" ~ type)? ~ ("=" ~ expr)? }

const = { "const" ~ IDENT ~ ("=" ~ expr)? }

if_stmt = {
    "if" ~ expr ~ ":" ~ statement_block ~
    ("else" ~ ":" ~ statement_block)?
}

for_stmt = {
    "for" ~ IDENT ~ "in" ~ expr ~ ":" ~ statement_block
}

while_stmt = {
    "while" ~ expr ~ ":" ~ statement_block
}

break_stmt = { "break" }

continue_stmt = { "continue" }

fun = {
    "fun" ~ IDENT ~ "(" ~ (fn_param ~ ("," ~ fn_param)*)? ~ ")" ~ (":" ~ type)? ~ "->" ~ statement_block
}

fn_param = { IDENT ~ (":" ~ type)? }

lambda_stmt = {
    "let" ~ IDENT ~ "=" ~ "(" ~ (IDENT ~ ("," ~ IDENT)*)? ~ ")" ~ "=>" ~ expr
}

import = {
    "use" ~ IDENT
}

try_stmt = {
    "try" ~ ":" ~ statement_block ~
    "catch" ~ IDENT ~ ":" ~ statement_block
}

type_def = {
    "type" ~ IDENT ~ ":" ~ struct_block
}

match_stmt = {
    "match" ~ expr ~ ":" ~ match_block
}

return_stmt = { "->" ~ expr }

expr_stmt = { expr }

expr = { pipe }

pipe = {
    logic ~ ("|>" ~ logic)*
}

logic = {
    equality ~ (("and" | "or") ~ equality)*
}

equality = {
    comparison ~ (("==" | "!=") ~ comparison)*
}

comparison = {
    term ~ ((">" | ">=" | "<" | "<=") ~ term)*
}

term = {
    factor ~ (("+" | "-") ~ factor)*
}

factor = {
    unary ~ (("*" | "/" | "%") ~ unary)*
}

unary = {
      ("-" | "!") ~ unary
    | primary
}

primary = {
      STRING
    | NUMBER
    | IDENT
    | call
    | list
    | "(" ~ expr ~ ")"
}

call = {
    IDENT ~ "(" ~ (expr ~ ("," ~ expr)*)? ~ ")"
}

list = {
    "[" ~ (expr ~ ("," ~ expr)*)? ~ "]"
}

pattern = {
      IDENT
    | NUMBER
    | STRING
    | "_"
}

type = {
      "String"
    | "Number"
    | "List"
    | IDENT
}

statement_block = {
    NEWLINE ~ INDENT ~ statement+ ~ DEDENT
}

struct_block = {
    NEWLINE ~ INDENT ~ (IDENT ~ (":" ~ type)?)+ ~ DEDENT
}

match_block = {
    NEWLINE ~ INDENT ~ (pattern ~ "|" ~ statement+)+ ~ DEDENT
}

STRING = { "\"" ~ (!"\"")* ~ "\"" }

NUMBER = { ASCII_DIGIT+ ("." ~ ASCII_DIGIT+)? }

IDENT = { ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

NEWLINE = { "\n" }

INDENT = { "    " }

DEDENT = { "" }

COMMENT = _{ "@" ~ (!NEWLINE)* ~ NEWLINE }

WHITESPACE = _{ " " | "\t" | NEWLINE | COMMENT }
